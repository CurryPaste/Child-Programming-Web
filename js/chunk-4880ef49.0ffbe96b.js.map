{"version":3,"sources":["webpack:///./src/views/Class/utils.js","webpack:///./src/views/Class/test.vue?f41a","webpack:///./src/views/Class/test.vue","webpack:///src/views/Class/test.vue","webpack:///./src/views/Class/test.vue?cf19","webpack:///./src/views/Class/test.vue?9fd8"],"names":["utils","getMeshFromMeshs","newMeshes","name","mesh","forEach","m","getMeshSize","checkmesh","sizes","getHierarchyBoundingVectors","size","x","max","min","y","z","staticStyle","_c","directives","rawName","_vm","expression","attrs","windowParams","value","staticClass","on","_v","engine","camera","plane","ground","skybox","car","cubeParent","startingPoint","bodyMass","bodyFriction","bodyRestitution","groundFriction","groundRestitution","speedSelect","buttonClicked","async","loadScene","scene","customLoadingUI","dragListening","addPhysicEffect","initCubes","setTimeout","hideLoadingUI","console","ArcAnimation","initButtons","url","restartBtn","slowImg","image","fastImg","speedBtn","speedBtnBorder","advancedTexture","toAlpha","toBeta","toRadius","BABYLON","end","keysAlpha","frame","animCamAlpha","keysBeta","animCamBeta","keysRadius","animCamRadius","begin","document","img","window","window1","initAmmo","mass","restitution","friction","makePhysicsObjects","scaling","physicsRoot","cube","cube2","cube3","actionManager","hl","createBasicRoundedBox","diameter","segments","sphere","box","roundedBox","currentMesh","canvas","initRobot","initScene","light","materialPlane","radius","groundMaterial","skyMaterial","data","show3Dcanvans","movable","resizable","methods","setCameraPosition","alpha","beta","component","staticRenderFns"],"mappings":"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gBACAA,cACAE,gBACAA,gBAGAE,gBACAA,gBACAA,gBAWA,SAAST,EAAaU,EAASC,EAAQC,GAEvC,mCACA,QACA,GACAC,mCACAA,2CAGA,IAAAC,MAEA,KACAC,QACAC,QACA7C,gBAEA4C,QACAC,QACA7C,UAEA8C,aAGA,2HACA,KACAC,QAAAF,QAAA7C,eACA+C,QAAAF,QAAA7C,UACAgD,aAGA,6HACA,KACAC,QAAAJ,QAAA7C,iBACAiD,QAAAJ,QAAA7C,UACAkD,aAGA7C,yBAGAgB,iBACAhB,EACA8C,EACAR,GACA,EACA,EACA,KACAf,wBAKA,SAASD,IACTvB,kBACAgD,2DAGA,SAAS9B,IAEToB,gEACA,+CACA,6CACA,4CACA,sCACA,qCAEA,gBACAW,sBACAA,sBACAA,yBACA,gCAEA,wBACAC,wDAIA,mCACA,kCAKA,yCACA,oCACAC,oCAGAnD,qBAGAe,eAAeqC,IACf,oBACA5B,sBAEAP,uEAEAA,oCACAO,2FACAA,yEACAA,6DACAA,yDACAA,0DAIA,SAASJ,IAETlB,+EACAmD,OACAC,cACAC,YACA,GAGA,mDACA/B,2BAEA,4BACA,KACA,aACA,iBAEAnB,IAIA,SAASmD,EAAmBnF,EAAW4C,EAAOwC,EAAS3E,GACvD,+BAEAT,cACA,gBACAqF,gBAKAA,+BACAjF,kCACAA,kCACAA,kCACAA,+EAAA4E,SAAA,KAIAK,0BAEAA,8EACAL,OACAE,WACAD,eACA,GAGA,iBAGA,OAFAI,4DACAA,qDACA,EAGA,SAASrC,IACT,QACA,aACAf,kCACA,aACA,oBAEAqD,mBACAA,mBACAA,oDACAA,+DACArD,OAEA,qBACAsD,mBACAA,mBACAA,mBACAA,oDACAA,2DACAtD,OAEA,qBACAuD,mBACAA,mBACAA,mBACAA,oDACAA,+DACAvD,OAGA,gCACAqD,kBACAC,kBACAC,kBAGA,uCACAC,iGACA,4BACA,UACAC,iCACA,UACAA,iCACA,WACAA,qCAMAD,gGACA,4BACA,UACAC,gBACA,UACAA,gBACA,WACAA,oBAIA9C,oBAIA,SAAS+C,EAAsB/C,EAAO3C,EAAMQ,GAC5C,UAAAwE,KAAAC,KACA,UACA,UACA,0CAAAU,WAAAC,aAAA,GACA,iCACA,uDACAC,YACAC,YACA,iBACA9F,EACA,kDACA2C,GAWA,OATAoD,eACAA,2CACAA,EACA/B,iCACA,CAAAe,OAAAC,cAAAC,aAEAc,oBACAA,gDACAA,sBACA,EAIA,SAASlD,IAET,IAEA,EAFA,yBAKA,aACA,gDACA,qBAEA,aACA,cAEA,MAIA,cACA,iBAIA,gDACA,8BAIA,QACAmD,eACA,eACA9C,yBACA,wBAEA8C,YAEA9C,6BAEAjB,OAEA,GACAe,uBACArB,qBACA,MAMA,cACA,MAGA,GAIA,WACA,MAIAuB,+BACA,oBACAA,sBACA8C,yBACA9C,uCAEAjB,OAIA,aASA,GAPA,IACAO,KACAD,gBAKA,EAGA,OAFAZ,2BACAM,SAMAgE,uCACAA,qCACAA,uCAIAxD,eAAeyD,IACfhD,yBAEA,8CAEA,qBACA,yDACA,WACAA,wBAEAnB,IAGA,SAASoE,IAET,8CAEAzE,wBAEA,wBAEAA,4BACAiB,cAGAiC,6CACAlD,cAIAC,qEAEAA,2BACAA,0BACAA,YAGAA,qBACAA,sBACAA,wBAEAA,mBACAA,oBACAgB,sCAEAhB,sBAGA,qEAEAyE,kCAEAA,cAGA,kDACAC,wDACAA,qBACAA,WACAzE,wCAAA0E,YAAA,GACA1E,uBACAA,aACAA,iBACAA,sBAGA,YACAC,8CACA,sCACA0E,gCACAA,UACA,YACAA,mCACAA,qBAEAA,wBAEAA,wBACA,UACAA,qCACAA,WACA1E,aACAA,sBAGA,4CAMA,OALA2E,gBACAA,qBACA1E,sCACAA,aAEA,EAIe,OACf9B,YACAyG,OACA,OACAC,iBAEArF,cACAsF,WACAC,gBAIA,sBAEA,KAEAC,SACAC,uBAGA,OAFA5D,iBAEA,GACA,YACAvB,WACA,MACA,WACAA,UACA,MACA,aACAA,YACA,MAEA,UAAAoF,OAAAC,SAAAV,GAAA,EACApD,uCCztB6V,I,wBCQzV+D,EAAY,eACd,EACA,EACAC,GACA,EACA,KACA,WACA,MAIa,aAAAD,E","file":"js/chunk-4880ef49.0ffbe96b.js","sourcesContent":["var utils = {\n    //meshs中根据名称获取mesh\n    getMeshFromMeshs(newMeshes, name) {\n        var mesh = null\n        newMeshes.forEach(m => {\n            if (m.name == name) {\n                mesh = m\n            }\n        })\n        return mesh\n    },\n\n    //获取mesh的尺寸信息\n    getMeshSize(checkmesh) {\n        const sizes = checkmesh.getHierarchyBoundingVectors()\n        const size = {\n            x: (sizes.max.x - sizes.min.x),\n            y: (sizes.max.y - sizes.min.y),\n            z: (sizes.max.z - sizes.min.z)\n        }\n        return size\n    },\n}\nexport default utils;\n","export * from \"-!../../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--7-oneOf-1-0!../../../node_modules/css-loader/dist/cjs.js??ref--7-oneOf-1-1!../../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../../node_modules/postcss-loader/src/index.js??ref--7-oneOf-1-2!../../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./test.vue?vue&type=style&index=0&id=52a9e527&prod&scoped=true&lang=css&\"","var render = function render(){var _vm=this,_c=_vm._self._c;return _c('div',{staticStyle:{\"height\":\"100%\",\"width\":\"100%\"}},[_c('v-btn',{directives:[{name:\"show\",rawName:\"v-show\",value:(!_vm.show3Dcanvans),expression:\"!show3Dcanvans\"}],staticStyle:{\"padding\":\"10px 20px 5px 20px\",\"position\":\"absolute\",\"right\":\"10px\",\"top\":\"10px\"},attrs:{\"icon\":\"\",\"color\":\"#505781\"},on:{\"click\":function($event){_vm.show3Dcanvans=!_vm.show3Dcanvans}}},[_c('v-icon',[_vm._v(\"mdi-equal-box\")])],1),_c('div',{directives:[{name:\"window\",rawName:\"v-window\",value:(_vm.windowParams),expression:\"windowParams\"},{name:\"show\",rawName:\"v-show\",value:(_vm.show3Dcanvans),expression:\"show3Dcanvans\"}],attrs:{\"id\":\"window1\"}},[_c('div',{staticStyle:{\"display\":\"flex\",\"justify-content\":\"space-between\"},attrs:{\"id\":\"header\"}},[_c('div',{staticClass:\"header\"},[_vm._v(\"仿真 \")]),_c('v-btn',{staticStyle:{\"padding\":\"10px 20px 5px 20px\"},attrs:{\"icon\":\"\",\"color\":\"white\"},on:{\"click\":function($event){_vm.show3Dcanvans=!_vm.show3Dcanvans}}},[_c('v-icon',[_vm._v(\"mdi-close\")])],1)],1),_vm._m(0)]),_c('div',{staticStyle:{\"display\":\"flex\",\"justify-content\":\"space-around\",\"width\":\"680px\"}},[_c('div',[_c('label',[_vm._v(\"alpha:\")]),_c('button',{staticClass:\"btn\",attrs:{\"type\":\"button\"},on:{\"click\":function($event){return _vm.setCameraPosition('alpha',Math.PI/10)}}},[_vm._v(\"+ \")]),_c('button',{staticClass:\"btn\",attrs:{\"type\":\"button\"},on:{\"click\":function($event){return _vm.setCameraPosition('alpha',-Math.PI/10)}}},[_vm._v(\"- \")])]),_c('div',[_c('label',[_vm._v(\"beta:\")]),_c('button',{staticClass:\"btn\",attrs:{\"type\":\"button\"},on:{\"click\":function($event){return _vm.setCameraPosition('beta',Math.PI/10)}}},[_vm._v(\"+ \")]),_c('button',{staticClass:\"btn\",attrs:{\"type\":\"button\"},on:{\"click\":function($event){return _vm.setCameraPosition('beta',-Math.PI/10)}}},[_vm._v(\"- \")])]),_c('div',[_c('label',[_vm._v(\"radius:\")]),_c('button',{staticClass:\"btn\",attrs:{\"type\":\"button\"},on:{\"click\":function($event){return _vm.setCameraPosition('radius',Math.PI)}}},[_vm._v(\"+ \")]),_c('button',{staticClass:\"btn\",attrs:{\"type\":\"button\"},on:{\"click\":function($event){return _vm.setCameraPosition('radius',-Math.PI)}}},[_vm._v(\"- \")])])])],1)\n}\nvar staticRenderFns = [function (){var _vm=this,_c=_vm._self._c;return _c('div',{staticStyle:{\"z-index\":\"10001\",\"padding-left\":\"10px\"}},[_c('canvas',{attrs:{\"id\":\"renderCanvas\"}})])\n}]\n\nexport { render, staticRenderFns }","<template>\n  <div style=\"height: 100%;width: 100%;\">\n    <!--窗口关闭后显示的开启按钮-->\n    <v-btn\n        icon\n        color=\"#505781\"\n        style=\"padding: 10px 20px 5px 20px;position: absolute;right: 10px;top: 10px;\"\n        v-show=\"!show3Dcanvans\"\n        @click=\"show3Dcanvans=!show3Dcanvans\"\n    >\n      <v-icon>mdi-equal-box</v-icon>\n    </v-btn>\n    <!--可移动窗口-->\n    <div id=\"window1\" v-window=\"windowParams\" v-show=\"show3Dcanvans\">\n      <!--顶栏-->\n      <div id=\"header\" style=\"display: flex;justify-content: space-between;\">\n        <!--标题-->\n        <div class=\"header\">仿真\n        </div>\n        <!--关闭窗口按钮-->\n        <v-btn\n            icon\n            color=\"white\"\n            style=\"padding: 10px 20px 5px 20px;\"\n            @click=\"show3Dcanvans=!show3Dcanvans\"\n        >\n          <v-icon>mdi-close</v-icon>\n        </v-btn>\n      </div>\n      <!--3d引擎cavans-->\n      <div style=\"z-index: 10001;padding-left: 10px;\">\n        <canvas id=\"renderCanvas\"></canvas>\n      </div>\n    </div>\n\n    <div style=\"display: flex;justify-content: space-around;width: 680px;\">\n      <div>\n        <label>alpha:</label>\n        <button type=\"button\" class=\"btn\"\n                @click=\"setCameraPosition('alpha',Math.PI/10)\">+\n        </button>\n        <button type=\"button\" class=\"btn\"\n                @click=\"setCameraPosition('alpha',-Math.PI/10)\">-\n        </button>\n      </div>\n      <div>\n        <label>beta:</label>\n        <button type=\"button\" class=\"btn\"\n                @click=\"setCameraPosition('beta',Math.PI/10)\">+\n        </button>\n        <button type=\"button\" class=\"btn\"\n                @click=\"setCameraPosition('beta',-Math.PI/10)\">-\n        </button>\n      </div>\n      <div>\n        <label>radius:</label>\n        <button type=\"button\" class=\"btn\"\n                @click=\"setCameraPosition('radius',Math.PI)\">+\n        </button>\n        <button type=\"button\" class=\"btn\"\n                @click=\"setCameraPosition('radius',-Math.PI)\">-\n        </button>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport * as BABYLON from 'babylonjs';\nimport * as BABYLON_MATERAIAL from \"babylonjs-materials\"\nimport * as GUI from 'babylonjs-gui';\nimport ammo from \"ammo.js\";\nimport utils from \"./utils\";\n\n\nconst url = \"http://localhost:8088/static/simulator/\"\n\n//全局变量\nvar scene = null //场景实例\nvar engine = null //3d引擎实例\nvar camera = null //摄像机实例\nvar plane = null //绿地\nvar ground = null //网格\nvar skybox = null //天空盒\nvar car = null //小车\nvar cubeParent = null //方块组\nvar startingPoint = new BABYLON.Vector3(0, 0, 0)//当前点击位置\n\n//质量 、摩擦系数、反弹系数\nconst bodyMass = 0.5, bodyFriction = 0.5, bodyRestitution = 0.9;\nconst groundFriction = 0.8, groundRestitution = 0.5;\n\nlet speedSelect = null//显示速度选择窗\nlet buttonClicked = false//按钮是否被点击\n\nasync function loadScene() {\n  //场景初始化，可看文章一\n  scene = initScene()\n\n  //可看文章五，自定义启动动画\n  customLoadingUI()\n\n  //加载网络模型，可看文章二\n  await initRobot()\n\n  //可看文章三，监听拖动事件，实现点击拖动模型\n  dragListening()\n\n  //可看文章四，实现碰撞效果\n  // 1、初始化重力碰撞系统\n  await initAmmo()\n  // 2、将地面和小车加入碰撞体\n  addPhysicEffect()\n  //3、加入碰撞体方块\n  initCubes()\n\n  //可看文章五，关闭启动动画\n  setTimeout(() => {\n    hideLoadingUI()\n  }, 1000)\n\n  //可看文章六，相机控制与相机动画\n  setTimeout(function () {\n    console.log(camera.alpha, camera.beta, camera.radius)\n    //摄像机原位置 1.1383885512243588 1.3642551964995249 50\n    //通过相机控制输出获取期望值，然后填入\n    ArcAnimation(-1.5649881922490174, 0, 68.84955592153878)\n  }, 1500)\n\n  //可看文章七，babylonjs-gui 按钮实现\n  initButtons()\n\n}\n\n\nfunction initButtons() {\n  //在场景中设置一个全屏的前景2d界面\n  var advancedTexture = GUI.AdvancedDynamicTexture.CreateFullscreenUI(\"btnsUI\", true, scene);\n\n  //初始化重启按钮\n  var restartBtn = GUI.Button.CreateImageOnlyButton(\n      \"but\",\n      url + \"restart.png\"\n  );\n  restartBtn.height = \"60px\";\n  restartBtn.width = \"60px\";\n  restartBtn.thickness = 0;//边框\n  restartBtn.horizontalAlignment = GUI.Control.HORIZONTAL_ALIGNMENT_RIGHT//在全屏的水平排列方位\n  restartBtn.verticalAlignment = GUI.Control.VERTICAL_ALIGNMENT_BOTTOM//在全屏的垂直排列方位\n  restartBtn.top = \"-20px\"//顶部偏移量\n  restartBtn.left = \"-20px\"//左侧偏移量\n  //按钮点击时间监听回调\n  restartBtn.onPointerClickObservable.add(function () {\n    console.log(\"重启引擎\")\n  });\n\n  //初始化速度选择弹窗框（包含了龟速和兔速按钮的向上弹出框）\n  speedSelect = new GUI.Rectangle(\"speedSelect\");\n  speedSelect.height = \"110px\";\n  speedSelect.width = \"60px\";\n  speedSelect.horizontalAlignment = GUI.Control.HORIZONTAL_ALIGNMENT_LEFT\n  speedSelect.verticalAlignment = GUI.Control.VERTICAL_ALIGNMENT_BOTTOM\n  speedSelect.top = \"-90px\"\n  speedSelect.left = \"20px\"\n  speedSelect.thickness = 3;\n  speedSelect.color = \"#505781\";\n  speedSelect.background = \"white\";\n  speedSelect.cornerRadius = 15;\n  speedSelect.isVisible = false\n\n  //初始化龟速按钮\n  var slowImg = GUI.Button.CreateImageOnlyButton(\n      \"slowlyBtn\",\n      url + \"turtle.png\"\n  );\n  slowImg.width = \"30px\";\n  slowImg.height = \"30px\";\n  slowImg.thickness = 0;\n  slowImg.verticalAlignment = GUI.Control.VERTICAL_ALIGNMENT_TOP\n  slowImg.top = 15;\n  slowImg.onPointerClickObservable.add(function () {\n    console.log(\"slowImg click\")\n    image.source = url + \"turtle.png\"\n    // robotCotroller.setSpeed(1)\n    //后续通过robot控制器实例设置移动速度参数\n    console.log('设置移动速度：1')\n    speedSelect.isVisible = false//选择完，关闭速度选择弹窗\n  });\n\n  //初始化兔速按钮\n  var fastImg = GUI.Button.CreateImageOnlyButton(\n      \"fastBtn\",\n      url + \"rabbit.png\"\n  );\n  fastImg.width = \"30px\";\n  fastImg.height = \"30px\";\n  fastImg.thickness = 0;\n  fastImg.verticalAlignment = GUI.Control.VERTICAL_ALIGNMENT_BOTTOM\n  fastImg.top = -15;\n  fastImg.onPointerClickObservable.add(function () {\n    console.log(\"fastImg click\")\n    image.source = url + \"rabbit.png\"\n    // robotCotroller.setSpeed(6)\n    console.log('设置移动速度：6')\n    speedSelect.isVisible = false//选择完，关闭速度选择弹窗\n  });\n\n  speedSelect.addControl(slowImg)\n  speedSelect.addControl(fastImg)\n\n  //当前选择速度模式按钮（点击会弹出速度选择弹窗）\n  var speedBtn = new GUI.Button(\"speedBtn\");\n  speedBtn.height = \"60px\";\n  speedBtn.width = \"60px\";\n  speedBtn.horizontalAlignment = GUI.Control.HORIZONTAL_ALIGNMENT_LEFT\n  speedBtn.verticalAlignment = GUI.Control.VERTICAL_ALIGNMENT_BOTTOM\n  speedBtn.top = \"-20px\"\n  speedBtn.left = \"20px\"\n  speedBtn.thickness = 0;\n  speedBtn.onPointerClickObservable.add(function () {\n    speedSelect.isVisible = !speedSelect.isVisible\n    if (speedSelect.isVisible) {\n      buttonClicked = true//设置速度选择弹窗弹窗状态为true，用于弹窗后移动模型时取消弹窗状态\n    }\n  });\n\n  //当前选择速度模式按钮的边框\n  var speedBtnBorder = new GUI.Ellipse();\n  speedBtnBorder.width = \"60px\"\n  speedBtnBorder.height = \"60px\";\n  speedBtnBorder.color = \"#505781\";\n  speedBtnBorder.thickness = 3;\n  speedBtnBorder.background = \"white\";\n  //当前选择速度模式按钮的图案\n  var image = new GUI.Image(\"currentSpeedBtn\", url + \"turtle.png\");\n  image.width = \"30px\";\n  image.height = \"30px\";\n  image.thickness = 0;\n  speedBtn.addControl(speedBtnBorder);\n  speedBtn.addControl(image);\n\n  //将按钮添加在全屏的2d前景界面中\n  advancedTexture.addControl(restartBtn);\n  advancedTexture.addControl(speedBtn);\n  advancedTexture.addControl(speedSelect);\n}\n\n\n/**\n * 相机动画\n * @param toAlpha  动画完成时的alpha\n * @param toBeta  动画完成时的beta\n * @param toRadius 动画完成时的radius\n * @constructor\n */\nfunction ArcAnimation(toAlpha, toBeta, toRadius) {\n\n  let animCamAlpha = new BABYLON.Animation(\"animCam\",\n      \"alpha\",//需要设置动画的属性名称\n      30,//每秒帧数\n      BABYLON.Animation.ANIMATIONTYPE_FLOAT,//属性变量类型  浮点型\n      BABYLON.Animation.ANIMATIONLOOPMODE_CONSTANT//动画循环模式 保持最终状态\n  );\n\n  let begin = 0, end = 100\n\n  let keysAlpha = [];//alpha动画关键帧列表，从0-100%，alpha从camera.alpha变化到传入的toAlpha参数值\n  keysAlpha.push({\n    frame: begin,\n    value: camera.alpha\n  });\n  keysAlpha.push({\n    frame: end,\n    value: toAlpha\n  });\n  animCamAlpha.setKeys(keysAlpha)//配置动画关键帧列表到动画对象中\n\n  //初始化beta动画参数\n  let animCamBeta = new BABYLON.Animation(\"animCam\", \"beta\", 30, BABYLON.Animation.ANIMATIONTYPE_FLOAT, BABYLON.Animation.ANIMATIONLOOPMODE_CONSTANT)\n  let keysBeta = []\n  keysBeta.push({frame: begin, value: camera.beta})\n  keysBeta.push({frame: end, value: toBeta})\n  animCamBeta.setKeys(keysBeta)\n\n  //初始化radius动画参数\n  let animCamRadius = new BABYLON.Animation(\"animCam\", \"radius\", 30, BABYLON.Animation.ANIMATIONTYPE_FLOAT, BABYLON.Animation.ANIMATIONLOOPMODE_CONSTANT)\n  let keysRadius = [];\n  keysRadius.push({frame: begin, value: camera.radius})\n  keysRadius.push({frame: end, value: toRadius})\n  animCamRadius.setKeys(keysRadius)\n\n  //加入相机动画列表中\n  camera.animations.push(animCamAlpha, animCamBeta, animCamRadius)\n\n  //通过scene开启camera的动画列表\n  scene.beginAnimation(\n      camera,//开始动画列表的对象\n      begin,//动画开始帧\n      end,//动画结束帧\n      false,//动画是否循环\n      6,//动画的速度比\n      () => {\n        console.log('camera')\n      }//动画执行完成回调\n  )\n}\n\nfunction hideLoadingUI() {\n  engine.hideLoadingUI()\n  document.getElementById(\"customLoadingScreenDiv\").remove()\n}\n\nfunction customLoadingUI() {\n\n  BABYLON.DefaultLoadingScreen.prototype.displayLoadingUI = function () {\n    this._loadingDiv = document.createElement(\"div\");\n    this._loadingDiv.id = \"customLoadingScreenDiv\";\n    this._loadingDiv.style.background = \"#505781\";\n    this._loadingDiv.style.zIndex = \"10006\"\n    this._loadingDiv.style.height = \"100%\"\n\n    var img = new Image()\n    img.src = url + \"loading.gif\";\n    img.style.padding = \"15%\";\n    img.style.paddingTop = \"30%\";\n    this._loadingDiv.appendChild(img);\n\n    this._resizeLoadingUI();\n    window.addEventListener(\"resize\", this._resizeLoadingUI);\n\n    //这两个样式修改需要在this._resizeLoadingUI之后，因为该函数执行后会相对window窗口定位出cavans的位置，然后设置loading的位置\n    //而我们需要的是将其插入到可移动窗口中，以统一窗口的开启关闭\n    this._loadingDiv.style.left = \"10px\"\n    this._loadingDiv.style.top = \"39px\"\n\n    // document.body.appendChild(this._loadingDiv);\n    // 修改为\n    // 获取当前可移动窗口元素\n    let window1 = document.getElementById('window1')\n    let header = document.getElementById('header')\n    window1.insertBefore(this._loadingDiv,header)\n  };\n\n  engine.displayLoadingUI();\n}\n\nasync function initAmmo() {\n  const Ammo = await ammo();\n  console.log(\"Ammo\", Ammo)\n  //启用y方向重力\n  scene.enablePhysics(new BABYLON.Vector3(0, -10, 0), new BABYLON.AmmoJSPlugin(true, Ammo));\n\n  scene.onReadyObservable.add(function () {\n    console.log(scene.getPhysicsEngine()._physicsPlugin.bjsAMMO.btDefaultCollisionConfiguration());\n    console.log(scene.getPhysicsEngine()._physicsPlugin._collisionConfiguration);\n    console.log(scene.getPhysicsEngine()._physicsPlugin._dispatcher);\n    console.log(scene.getPhysicsEngine()._physicsPlugin._solver);\n    console.log(scene.getPhysicsEngine()._physicsPlugin.world);\n  });\n}\n\nfunction addPhysicEffect() {\n  //地面启用碰撞体\n  plane.physicsImpostor = new BABYLON.PhysicsImpostor(plane, BABYLON.PhysicsImpostor.BoxImpostor, {\n    mass: 0,\n    restitution: groundRestitution,\n    friction: groundFriction\n  }, scene);\n\n  //小车启用碰撞体\n  var robotBody = utils.getMeshFromMeshs(car, \"Glass_Plane.006\")\n  console.log('robotBody', robotBody)\n\n  var robotSize = utils.getMeshSize(robotBody)\n  var robotScale = 50\n  const robotScalingFactor = robotScale / 10;\n  var physicsRoot = makePhysicsObjects(car, scene, robotScalingFactor, robotSize)\n  //小车实例\n  car = physicsRoot\n}\n\n\nfunction makePhysicsObjects(newMeshes, scene, scaling, size) {\n  var physicsRoot = new BABYLON.Mesh(\"robot\", scene);\n  // physicsRoot.position.y -= 2\n  newMeshes.forEach((m) => {\n    if (m.parent == null) {\n      physicsRoot.addChild(m)\n    }\n  })\n\n  // 将所有碰撞体加入physics impostor\n  physicsRoot.getChildMeshes().forEach((m) => {\n    m.scaling.x = Math.abs(m.scaling.x)\n    m.scaling.y = Math.abs(m.scaling.y)\n    m.scaling.z = Math.abs(m.scaling.z)\n    m.physicsImpostor = new BABYLON.PhysicsImpostor(m, BABYLON.PhysicsImpostor.BoxImpostor, {mass: 0.1}, scene);\n  })\n\n  // 缩放根对象并将其变成physics impostor\n  physicsRoot.scaling.scaleInPlace(scaling)\n\n  physicsRoot.physicsImpostor = new BABYLON.PhysicsImpostor(physicsRoot, BABYLON.PhysicsImpostor.NoImpostor, {\n    mass: bodyMass,\n    friction: bodyFriction,\n    restitution: bodyRestitution\n  }, scene);\n\n  //转为碰撞体后，其y轴会偏移，偏移比例根据实际调整\n  const impostorOffset = -(size.y) / 1.1\n  physicsRoot.physicsImpostor.setDeltaPosition(new BABYLON.Vector3(0, impostorOffset, 0));\n  physicsRoot.position.subtractInPlace(new BABYLON.Vector3(0, -impostorOffset, 0));\n  return physicsRoot\n}\n\nfunction initCubes() {\n  var scale = 1\n  const scalingFactor = scale / 10;\n  cubeParent = new BABYLON.TransformNode(\"cubes\");\n  const cubeHeight = 80 * scalingFactor\n  var cube = createBasicRoundedBox(scene, \"cube\", cubeHeight)\n\n  cube.position._y += cubeHeight / 2\n  cube.position._x -= 100\n  cube.material = new BABYLON.StandardMaterial(\"amaterial\", scene);\n  cube.material.diffuseColor = new BABYLON.Color3(16 / 255.0, 156 / 255.0, 73 / 255.0);\n  cubeParent[0] = cube\n\n  var cube2 = createBasicRoundedBox(scene, \"cube2\", cubeHeight)\n  cube2.position._y += cubeHeight / 2\n  cube2.position._x -= 100\n  cube2.position._z += cubeHeight * 2\n  cube2.material = new BABYLON.StandardMaterial(\"amaterial\", scene);\n  cube2.material.diffuseColor = new BABYLON.Color3(48 / 255.0, 102 / 255.0, 150 / 255.0);\n  cubeParent[1] = cube2\n\n  var cube3 = createBasicRoundedBox(scene, \"cube3\", cubeHeight)\n  cube3.position._y += cubeHeight / 2\n  cube3.position._x -= 100\n  cube3.position._z -= cubeHeight * 2\n  cube3.material = new BABYLON.StandardMaterial(\"amaterial\", scene);\n  cube3.material.diffuseColor = new BABYLON.Color3(199 / 255.0, 88 / 255.0, 93 / 255.0);\n  cubeParent[2] = cube3\n\n  //对象事件监听\n  let actionManager = new BABYLON.ActionManager(scene);\n  cube.actionManager = actionManager;\n  cube2.actionManager = actionManager;\n  cube3.actionManager = actionManager;\n\n  // 方块鼠标hover高亮\n  var hl = new BABYLON.HighlightLayer(\"hl1\", scene);\n  actionManager.registerAction(new BABYLON.ExecuteCodeAction(BABYLON.ActionManager.OnPointerOverTrigger, function (evn) {\n    var hover_cube = evn.meshUnderPointer.id\n    if (hover_cube == cube.name) {\n      hl.addMesh(cube, BABYLON.Color3.White());\n    } else if (hover_cube == cube2.name) {\n      hl.addMesh(cube2, BABYLON.Color3.White());\n    } else if (hover_cube == cube3.name) {\n      hl.addMesh(cube3, BABYLON.Color3.White());\n    }\n\n\n  }));\n  //方块鼠标hover离开取消高亮\n  actionManager.registerAction(new BABYLON.ExecuteCodeAction(BABYLON.ActionManager.OnPointerOutTrigger, function (evn) {\n    var hover_cube = evn.meshUnderPointer.id\n    if (hover_cube == cube.name) {\n      hl.removeMesh(cube);\n    } else if (hover_cube == cube2.name) {\n      hl.removeMesh(cube2);\n    } else if (hover_cube == cube3.name) {\n      hl.removeMesh(cube3);\n    }\n  }));\n\n  scene.freezeMaterials();\n}\n\n//创建带碰撞体的方块\nfunction createBasicRoundedBox(scene, name, size) {\n  let mass = 0.25, restitution = 0.5, friction = 0.5\n  const boxSide = size;\n  const sphereSide = boxSide * 3.1 / 2;\n  const sphere = BABYLON.MeshBuilder.CreateSphere('sphere', {diameter: sphereSide, segments: 16}, scene);\n  const box = BABYLON.Mesh.CreateBox('box', boxSide, scene);\n  const intersection = BABYLON.CSG.FromMesh(box).intersect(BABYLON.CSG.FromMesh(sphere));\n  sphere.dispose();\n  box.dispose();\n  const roundedBox = intersection.toMesh(\n      name,\n      new BABYLON.StandardMaterial('roundedBoxMaterial', scene),\n      scene\n  );\n  roundedBox.draggable = true;\n  roundedBox.physicsImpostor = new BABYLON.PhysicsImpostor(\n      roundedBox,\n      BABYLON.PhysicsImpostor.BoxImpostor,\n      {mass: mass, restitution: restitution, friction: friction}\n  );\n  roundedBox.material.freeze();\n  roundedBox.material.specularColor = new BABYLON.Color3(0, 0, 0);\n  roundedBox.freezeWorldMatrix()\n  return roundedBox;\n}\n\n//鼠标点击拖动监听\nfunction dragListening() {\n  // 物体拖拽事件\n  var canvas = engine.getRenderingCanvas();\n\n  var currentMesh;//当前点击的模型网格\n\n  //判断当前点击对象是否是地板\n  var getGroundPosition = function () {\n    var pickinfo = scene.pick(scene.pointerX, scene.pointerY, function (mesh) {\n      return (mesh == ground || mesh == plane);\n    });\n    if (pickinfo.hit) {\n      return pickinfo.pickedPoint;\n    }\n    return null;\n  }\n\n  //鼠标点下\n  var onPointerDown = function (evt) {\n    if (evt.button !== 0) {\n      return;\n    }\n    //判断当前是否点击一个模型网格，如果是地板、天空盒等对象，则设置hit为false\n    var pickInfo = scene.pick(scene.pointerX, scene.pointerY, function (mesh) {\n      return (mesh !== ground && mesh !== plane && mesh !== skybox);\n    });\n    // console.log(\"pickInfo\", pickInfo)\n    //如果hit为true，则不为地板、天空盒等对象\n    if (pickInfo.hit) {\n      currentMesh = pickInfo.pickedMesh;//获取当前点击对象\n      if (currentMesh.parent == null) {\n        console.log(\"no parent\")//没有父节点则就是car对象了\n      } else if (currentMesh.parent.name == car.name) {\n        //有父节点，证明现在点击的是子对象，而移动需要移动整个小车对象，所以设置当前点击mesh为父节点（即car对象）\n        currentMesh = currentMesh.parent\n      }\n      console.log(\"currentMesh\", currentMesh)\n      //获取当前移动时地板的坐标\n      startingPoint = getGroundPosition(evt);\n      //移动物体时，暂时屏蔽相机的移动控制\n      if (startingPoint) { // we need to disconnect camera from canvas\n        setTimeout(function () {\n          camera.detachControl(canvas);\n        }, 0);\n      }\n    }\n  }\n\n  //鼠标点击着移动中\n  var onPointerMove = function (evt) {\n    if (!startingPoint) {\n      return;\n    }\n    if (!currentMesh) {\n      return;\n    }\n    //更新当前点击的地板位置\n    var current = getGroundPosition(evt);\n    if (!current) {\n      return;\n    }\n    //更新当前小车坐标位置为点击的地板位置\n    console.log('startingPoint', startingPoint)\n    var diff = current.subtract(startingPoint);\n    console.log('diff', diff)\n    currentMesh.position.addInPlace(diff);\n    console.log(\"currentMesh.name\", currentMesh.name)\n    //更新位置信息\n    startingPoint = current;\n  }\n\n  //鼠标点击后松开\n  var onPointerUp = function () {\n    //如果速度选择窗口位关闭，则关闭窗口\n    if (buttonClicked) {\n      buttonClicked = false\n      speedSelect.isVisible = false\n    }\n\n\n    //恢复相机移动控制\n    if (startingPoint) {\n      camera.attachControl(canvas, true);\n      startingPoint = null;\n      return;\n    }\n  }\n\n  //canvas绑定监听事件\n  canvas.addEventListener(\"pointerdown\", onPointerDown, false);\n  canvas.addEventListener(\"pointerup\", onPointerUp, false);\n  canvas.addEventListener(\"pointermove\", onPointerMove, false);\n}\n\n\nasync function initRobot() {\n  console.log('initRobot')\n  //模型url路径\n  const url = \"http://localhost:8088/static/model/\"\n  //模型名称\n  const modelName = \"sportcar.babylon\"\n  var result = await BABYLON.SceneLoader.ImportMeshAsync(null, url, modelName, scene);\n  var meshes = result.meshes\n  console.log(\"meshes\", meshes)\n  //不直接实例化小车节点，car对象存储meshes网格列表，在小车引入碰撞体后再实例化\n  car = meshes\n}\n\nfunction initScene() {\n  //获取到renderCanvas这个元素\n  var canvas = document.getElementById(\"renderCanvas\");\n  //初始化引擎\n  engine = new BABYLON.Engine(canvas, true);\n  //初始化场景\n  var scene = new BABYLON.Scene(engine);\n  //注册一个渲染循环来重复渲染场景\n  engine.runRenderLoop(function () {\n    scene.render();\n  });\n  //浏览器窗口变化时监听\n  window.addEventListener(\"resize\", function () {\n    engine.resize();\n  });\n\n  //相机初始化\n  camera = new BABYLON.ArcRotateCamera(\"Camera\", 0, 0, 0, new BABYLON.Vector3(0, 0, 0), scene);\n  //这里的值可通过课程6的相机控制手动控制获取期望位置\n  camera.alpha = 1.1383885512243588\n  camera.beta = 1.3642551964995249\n  camera.radius = 50\n  // (new BABYLON.Vector3(18, 9, 39));\n  //相机角度限制\n  camera.upperBetaLimit = 1.5;//最大z轴旋转角度差不多45度俯瞰\n  camera.lowerRadiusLimit = 50;//最小缩小比例\n  camera.upperRadiusLimit = 1500;//最大放大比例\n  //变焦速度\n  camera.wheelPrecision = 1; //电脑滚轮速度 越小灵敏度越高\n  camera.pinchPrecision = 20; //手机放大缩小速度 越小灵敏度越高\n  scene.activeCamera.panningSensibility = 100;//右键平移灵敏度\n  // 将相机和画布关联\n  camera.attachControl(canvas, true);\n\n  //灯光初始化\n  var light = new BABYLON.HemisphericLight(\"light1\", new BABYLON.Vector3(0, 10, 0), scene);\n  //设置高光颜色\n  light.specular = new BABYLON.Color3(0, 0, 0);\n  //设置灯光强度\n  light.intensity = 1\n\n  // 绿地初始化\n  var materialPlane = new BABYLON.StandardMaterial(\"texturePlane\", scene);\n  materialPlane.diffuseColor = new BABYLON.Color3(152 / 255.0, 209 / 255.0, 115 / 255.0)\n  materialPlane.backFaceCulling = false;\n  materialPlane.freeze()\n  plane = BABYLON.MeshBuilder.CreateDisc(\"ground\", {radius: 3000}, scene);\n  plane.rotation.x = Math.PI / 2;\n  plane.material = materialPlane;\n  plane.position.y = -0.1;\n  plane.freezeWorldMatrix()\n\n  //网格地板初始化\n  const groundSide = 144;\n  ground = BABYLON.Mesh.CreateGround(\"ground\", groundSide, groundSide, 1, scene, true);\n  var groundMaterial = new BABYLON_MATERAIAL.GridMaterial(\"grid\", scene);\n  groundMaterial.mainColor = BABYLON.Color3.White();//底板颜色\n  groundMaterial.alpha = 1;//透明度\n  const gridLineGray = 0.95;\n  groundMaterial.lineColor = new BABYLON.Color3(gridLineGray, gridLineGray, gridLineGray);\n  groundMaterial.backFaceCulling = true; // 可看到背面\n  //大网格间距\n  groundMaterial.majorUnitFrequency = 16;\n  //小网格间距\n  groundMaterial.minorUnitVisibility = 0;\n  const gridOffset = 8; // 网格偏移量\n  groundMaterial.gridOffset = new BABYLON.Vector3(gridOffset, 0, gridOffset);\n  groundMaterial.freeze(); // 冻结材质，优化渲染速度\n  ground.material = groundMaterial\n  ground.freezeWorldMatrix()\n\n  //天空盒初始化\n  var skyMaterial = new BABYLON_MATERAIAL.SkyMaterial(\"skyMaterial\", scene);\n  skyMaterial.inclination = 0\n  skyMaterial.backFaceCulling = false;\n  skybox = BABYLON.Mesh.CreateBox(\"skyBox\", 5000.0, scene);\n  skybox.material = skyMaterial;\n\n  return scene\n}\n\n\nexport default {\n  name: \"test\",\n  data() {\n    return {\n      show3Dcanvans: true,\n      //移动窗口配置\n      windowParams: {\n        movable: true,\n        resizable: false\n      }\n    }\n  },\n  async mounted() {\n    //加载场景\n    await loadScene()\n  },\n  methods: {\n    setCameraPosition(type, value) {\n      console.log(type, value)\n\n      switch (type) {\n        case 'alpha':\n          camera.alpha += value\n          break;\n        case 'beta':\n          camera.beta += value\n          break\n        case 'radius':\n          camera.radius += value\n          break\n      }\n      let {alpha, beta, radius} = camera\n      console.log(`更改后的值:${alpha},${beta},${radius}`)\n    }\n  }\n}\n</script>\n\n<style scoped>\n#renderCanvas {\n  width: 680px;\n  height: 680px;\n  touch-action: none;\n  z-index: 10000;\n  border-radius: 10px;\n}\n\n.btn {\n  background-color: #D9D9D9;\n  padding: 2px 15px;\n  margin: 5px;\n  border-radius: 4px;\n  width: 50px;\n}\n\n#window1 {\n  background-color: #505781;\n  border-radius: 10px;\n  width: 700px;\n  position: absolute;\n  top: 5px;\n  right: 55px;\n  z-index: 10005;\n}\n\n\n.header {\n  padding: 10px 20px 5px 20px;\n  color: white;\n  display: flex;\n}\n</style>","import mod from \"-!../../../node_modules/cache-loader/dist/cjs.js??ref--13-0!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./test.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/cache-loader/dist/cjs.js??ref--13-0!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./test.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./test.vue?vue&type=template&id=52a9e527&scoped=true&\"\nimport script from \"./test.vue?vue&type=script&lang=js&\"\nexport * from \"./test.vue?vue&type=script&lang=js&\"\nimport style0 from \"./test.vue?vue&type=style&index=0&id=52a9e527&prod&scoped=true&lang=css&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"52a9e527\",\n  null\n  \n)\n\nexport default component.exports"],"sourceRoot":""}